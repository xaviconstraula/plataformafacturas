generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para tipos de proveedores

enum ProviderType {
  MATERIAL_SUPPLIER // Proveedor de suministro de materiales
  MACHINERY_RENTAL // Proveedor de alquiler de maquinaria
}

// Enum for alert status

enum AlertStatus {
  PENDING
  APPROVED
  REJECTED
}

// Enum for batch processing status

enum BatchStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Modelo para Proveedores

model Provider {
  id            String             @id @default(cuid())
  name          String
  type          ProviderType
  cif           String             @unique // Número de Identificación Fiscal
  email         String?
  phone         String?
  address       String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  userId        String? // Optional during migration
  user          User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices      Invoice[]
  materials     MaterialProvider[]
  PriceAlert    PriceAlert[]
  ProviderAlias ProviderAlias[]

  @@index([type])
  @@index([userId])
}

// Modelo para Facturas

model Invoice {
  id          String        @id @default(cuid())
  invoiceCode String // Código de factura (único por proveedor)
  providerId  String
  provider    Provider      @relation(fields: [providerId], references: [id], onDelete: Cascade)
  issueDate   DateTime
  totalAmount Decimal       @db.Decimal(10, 2)
  pdfUrl      String? // URL al archivo PDF almacenado
  status      String        @default("PENDING") // PENDING, PROCESSED, APPROVED, etc.
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  items       InvoiceItem[]
  alerts      PriceAlert[]

  // Código único por proveedor
  // Composite indexes for supplier analytics performance
  // For supplier analytics with date sorting
  // For supplier analytics with amount sorting
  // For date-based supplier queries
  @@unique([invoiceCode, providerId])
  @@index([providerId])
  @@index([issueDate])
  @@index([invoiceCode])
  @@index([providerId, issueDate])
  @@index([providerId, totalAmount])
  @@index([issueDate, providerId])
}

// Modelo para Materiales

model Material {
  id          String   @id @default(cuid())
  code        String // Código del material (único por usuario)
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String? // Optional during migration
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Nueva funcionalidad para agrupación
  productGroup   ProductGroup? @relation(fields: [productGroupId], references: [id])
  productGroupId String?

  // Campos adicionales para mejor análisis
  category String? // Categoría del material
  unit     String? // Unidad de medida
  isActive Boolean @default(true) // Para productos descontinuados

  // Campos para identificación mejorada de productos
  referenceCode    String? // Código de referencia extraído del PDF
  alternativeCodes String? // Códigos alternativos separados por comas

  providers    MaterialProvider[]
  invoiceItems InvoiceItem[]
  PriceAlert   PriceAlert[]

  @@unique([code, userId])
  @@index([code])
  @@index([category])
  @@index([productGroupId])
  @@index([isActive])
  @@index([referenceCode])
  @@index([userId])
}

// Modelo para Items de Factura

model InvoiceItem {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  invoice    Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId  String
  material   Material @relation(fields: [materialId], references: [id])
  materialId String
  quantity   Decimal  @db.Decimal(10, 2)
  unitPrice  Decimal  @db.Decimal(10, 2)
  totalPrice Decimal  @db.Decimal(10, 2)
  itemDate   DateTime // Date specific to this item, may differ from invoice date

  // Nueva funcionalidad: OT/CECO
  workOrder String? // OT (Orden de Trabajo) o CECO (Centro de Coste)

  // Campos adicionales para mejor análisis
  description String? // Descripción específica del ítem en la factura
  lineNumber  Int? // Número de línea en la factura original

  // Índice para filtrar por OT/CECO
  // Composite indexes for analytics performance
  // For material analytics with date sorting
  // For material analytics with cost sorting
  // For material analytics with quantity sorting
  // For date-based material queries
  @@index([invoiceId])
  @@index([materialId])
  @@index([workOrder])
  @@index([itemDate])
  @@index([materialId, itemDate])
  @@index([materialId, totalPrice])
  @@index([materialId, quantity])
  @@index([itemDate, materialId])
  @@index([invoiceId, materialId])
}

// Tabla de relación entre Materiales y Proveedores

model MaterialProvider {
  id            String    @id @default(cuid())
  materialId    String
  material      Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)
  providerId    String
  provider      Provider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  lastPrice     Decimal   @db.Decimal(10, 2)
  lastPriceDate DateTime? // issueDate of the invoice that set this lastPrice
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Index for querying by date
  @@unique([materialId, providerId])
  @@index([materialId])
  @@index([providerId])
  @@index([lastPriceDate])
}

// Modelo para Alertas de Precios

model PriceAlert {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  material      Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
  materialId    String
  provider      Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId    String
  oldPrice      Decimal  @db.Decimal(10, 2)
  newPrice      Decimal  @db.Decimal(10, 2)
  percentage    Decimal  @db.Decimal(10, 2)
  status        String   @default("PENDING") // PENDING, REVIEWED, DISMISSED
  effectiveDate DateTime // Date when the price change became effective
  invoice       Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId     String

  // Constraint único para prevenir alertas duplicadas en la misma fecha
  // Índice compuesto para evitar duplicados
  @@unique([materialId, providerId, effectiveDate])
  @@index([materialId])
  @@index([providerId])
  @@index([invoiceId])
  @@index([materialId, providerId, effectiveDate])
}

// Modelo para Usuarios

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emailVerified Boolean   @default(false)
  image         String?
  sessions      Session[]
  accounts      Account[]

  // Relations with business entities (optional during migration)
  providers     Provider[]
  materials     Material[]
  productGroups ProductGroup[]

  @@index([email])
  @@map("user")
}

// Nuevo modelo para agrupación de productos similares

model ProductGroup {
  id               String     @id @default(cuid())
  standardizedName String     @unique // Nombre estandarizado del grupo
  description      String?
  category         String? // Categoría del producto
  unit             String? // Unidad de medida estándar
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  userId           String? // Optional during migration
  user             User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  materials        Material[] // Materiales que pertenecen a este grupo

  @@index([category])
  @@index([standardizedName])
  @@index([userId])
}

// Modelo para seguimiento de procesamiento por lotes

model BatchProcessing {
  id              String      @id @default(cuid())
  status          BatchStatus @default(PENDING)
  totalFiles      Int
  processedFiles  Int         @default(0)
  successfulFiles Int         @default(0)
  failedFiles     Int         @default(0)
  blockedFiles    Int         @default(0) // Files with blocked providers

  // Progress tracking
  currentFile         String? // Current file being processed
  estimatedCompletion DateTime? // Estimated completion time

  // Error tracking
  errors Json? // Array of error messages

  // Timestamps
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Optional user tracking if you implement authentication
  userId String? // For multi-user systems

  @@index([status])
  @@index([createdAt])
  @@index([userId])
}

/// Tabla para mapear CIFs antiguos a proveedores existentes tras una fusión

model ProviderAlias {
  id         String   @id @default(cuid())
  cif        String   @unique
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String

  @@index([providerId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

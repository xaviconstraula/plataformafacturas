generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para tipos de proveedores
enum ProviderType {
  MATERIAL_SUPPLIER // Proveedor de suministro de materiales
  MACHINERY_RENTAL // Proveedor de alquiler de maquinaria
}

// Enum for alert status
enum AlertStatus {
  PENDING
  APPROVED
  REJECTED
}

// Modelo para Proveedores
model Provider {
  id         String             @id @default(cuid())
  name       String
  type       ProviderType
  cif        String             @unique // Número de Identificación Fiscal
  email      String?
  phone      String?
  address    String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  invoices   Invoice[]
  materials  MaterialProvider[]
  PriceAlert PriceAlert[]

  @@index([type])
}

// Modelo para Facturas
model Invoice {
  id          String        @id @default(cuid())
  invoiceCode String        @unique // Código único de factura
  providerId  String
  provider    Provider      @relation(fields: [providerId], references: [id], onDelete: Cascade)
  issueDate   DateTime
  totalAmount Decimal       @db.Decimal(10, 2)
  pdfUrl      String? // URL al archivo PDF almacenado
  status      String        @default("PENDING") // PENDING, PROCESSED, APPROVED, etc.
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  items       InvoiceItem[]
  alerts      PriceAlert[]

  @@index([providerId])
  @@index([issueDate])
}

// Modelo para Materiales
model Material {
  id           String             @id @default(cuid())
  code         String             @unique // Código único del material
  name         String
  description  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  providers    MaterialProvider[]
  invoiceItems InvoiceItem[]
  PriceAlert   PriceAlert[]

  @@index([code])
}

// Modelo para Items de Factura
model InvoiceItem {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId  String
  material   Material @relation(fields: [materialId], references: [id])
  materialId String
  quantity   Decimal  @db.Decimal(10, 2)
  unitPrice  Decimal  @db.Decimal(10, 2)
  totalPrice Decimal  @db.Decimal(10, 2)
  itemDate   DateTime // Date specific to this item, may differ from invoice date

  @@index([invoiceId])
  @@index([materialId])
}

// Tabla de relación entre Materiales y Proveedores
model MaterialProvider {
  id            String    @id @default(cuid())
  materialId    String
  material      Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)
  providerId    String
  provider      Provider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  lastPrice     Decimal   @db.Decimal(10, 2)
  lastPriceDate DateTime? // issueDate of the invoice that set this lastPrice
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([materialId, providerId])
  @@index([materialId])
  @@index([providerId])
  @@index([lastPriceDate]) // Index for querying by date
}

// Modelo para Alertas de Precios
model PriceAlert {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  material      Material @relation(fields: [materialId], references: [id])
  materialId    String
  provider      Provider @relation(fields: [providerId], references: [id])
  providerId    String
  oldPrice      Decimal  @db.Decimal(10, 2)
  newPrice      Decimal  @db.Decimal(10, 2)
  percentage    Decimal  @db.Decimal(10, 2)
  status        String   @default("PENDING") // PENDING, REVIEWED, DISMISSED
  effectiveDate DateTime // Date when the price change became effective
  invoice       Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId     String

  @@index([materialId])
  @@index([providerId])
  @@index([invoiceId])
}

// Modelo para Usuarios
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}
